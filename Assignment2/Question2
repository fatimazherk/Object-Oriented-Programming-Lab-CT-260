// Suppose that you are asked to store the data given in the following Table by using three arrays, one
// for each column, where the index number is mapped for the record reference. For example the Roll
// number in index 0 of the first array corresponds to the name in index0 of the second array and the
// student marks are placed in third array on the same index.
// a. Write a function that will sort the data according to the marks obtained.
// b. Write a function to search and print the data based on a roll number.
// c. Write a function to search and print the data based on name.

#include <iostream>
#include <cstring> // for strcmp
using namespace std;

const int MAX_RECORDS = 7; // Maximum number of records

// Overloaded swap function for const char*
void swap(const char*& a, const char*& b) {
    const char* temp = a;
    a = b;
    b = temp;
}

// Function to sort data according to marks obtained
void sort_data(int roll[], const char* name[], float marks[], int num_records) {
    for (int i = 0; i < num_records - 1; ++i) {
        for (int j = 0; j < num_records - i - 1; ++j) {
    if (marks[j] > marks[j + 1]) {
                std::swap(roll[j], roll[j + 1]); // Using std::swap for integers
                swap(name[j], name[j + 1]);
                std::swap(marks[j], marks[j + 1]); // Using std::swap for floats
            }
        }
    }
}

// Function to search and print data based on roll number
void search_by_roll(int roll[], const char* name[], float marks[], int num_records, int roll_number) {
    bool found = false;
    for (int i = 0; i < num_records; ++i) {
        if (roll[i] == roll_number) {
            cout << "Roll Number: " << roll[i] << ", Name: " << name[i] << ", Marks: " << marks[i] << endl;
            found = true;
            break;
        }
  }
    if (!found) {
        cout << "Record with roll number " << roll_number << " not found." << endl;
    }
}

// Function to search and print data based on name
void search_by_name(int roll[], const char* name[], float marks[], int num_records, const char* search_name) {
    bool found = false;
    for (int i = 0; i < num_records; ++i) {
        if (strcmp(name[i], search_name) == 0) {
            cout << "Roll Number: " << roll[i] << ", Name: " << name[i] << ", Marks: " << marks[i] << endl;
            found = true;
        }
    }
    if (!found) {
        cout << "Record with name \"" << search_name << "\" not found." << endl;
    }
}

int main() {
    int roll[MAX_RECORDS] = {1001, 1002, 1004, 1005, 1007, 1008, 1009};
    const char* name[MAX_RECORDS] = {"Salman", "Zubair", "Ahsan", "Farha", "Hassan", "Kamran", "Maryam"};
    float marks[MAX_RECORDS] = {75.5, 80, 64, 78, 65, 54, 60};
    int num_records = MAX_RECORDS;

    // Sort data according to marks
    sort_data(roll, name, marks, num_records);

    // Print sorted data
    cout << "Sorted data according to marks:" << endl;
    for (int i = 0; i < num_records; ++i) {
        cout << "Roll Number: " << roll[i] << ", Name: " << name[i] << ", Marks: " << marks[i] << endl;
    }

    // Search and print data based on user input for roll number
    int search_roll_number;
    cout << "\nEnter the roll number you want to search: ";
    cin >> search_roll_number;
    search_by_roll(roll, name, marks, num_records, search_roll_number);

    // Search and print data based on user input for name
    char search_name[100];
    cout << "\nEnter the name you want to search: ";
    cin.ignore(); // Clear input buffer
    cin.getline(search_name, 100);
    search_by_name(roll, name, marks, num_records, search_name);

    return 0;
}
